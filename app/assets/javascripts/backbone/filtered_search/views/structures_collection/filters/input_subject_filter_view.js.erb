FilteredSearch.module('Views.StructuresCollection.Filters', function(Module, App, Backbone, Marionette, $, _) {

    Module.InputSubjectFilterView = Backbone.Marionette.ItemView.extend({
        template: Module.templateDirname() + 'input_subject_filter_view',

        subjects_header_template: '<div class="text--center soft-half bordered--bottom"><strong>Disciplines</strong></div>',
        subjects_template:  "<div>{{ name }}</div>",
        structure_header_template: '<div class="text--center soft-half bordered--bottom"><strong>Professeurs, associations et Ã©coles</strong></div>',
        structure_template: '<a class="flexbox" href="{{ url }}"><div class="flexbox__item text--left" style="width: 40px"><img class="rounded--circle" src="{{logo_url}}" height="30" width="30"></div><div class="flexbox__item">{{name}}</div></a>',

        // setup: function setup (data) {
        //     if (data.address_name) { data.address_name = data.address_name.replace('+', ' '); }
        //     this.ui.$subjects_input.attr('value', data.address_name);
        // },

        ui: {
            '$subjects_input': '#subject-picker'
        },

        events: {
            'typeahead:selected #subject-picker': 'announce'
        },

        initialize: function initialize () {
            this.initializeTemplates();
        },

        /*
         * Initialize templates
         */
        initializeTemplates: function initializeTemplates () {
            this.structure_template        = Handlebars.compile(this.structure_template);
            this.subjects_template         = Handlebars.compile(this.subjects_template);
            this.structure_header_template = Handlebars.compile(this.structure_header_template);
            this.subjects_header_template  = Handlebars.compile(this.subjects_header_template);
        },

        onRender: function onRender () {
            var that = this;
            var optionalSearchWords = GLOBAL.EXCLUDED_SEARCH_WORDS.source.replace(/\(|\)/g, '').replace(/\|/g, ',');
            var client = new AlgoliaSearch('<%= ENV['ALGOLIA_APPLICATION_ID'] %>', '<%= ENV['ALGOLIA_SEARCH_API_KEY'] %>');
            this.ui.$subjects_input.typeahead({
                highlight : true,
                minLength: 1,
                autoselect: true,
                limit: 10
            }, {
                displayKey: 'name',
                templates: {
                    header: this.subjects_header_template,
                    suggestion: function suggestion (data) {
                        return that.subjects_template(data);
                    }
                },
                source: client.initIndex('<%= Subject.index_name %>').ttAdapter({ hitsPerPage: 7, optionalWords: optionalSearchWords })
            }, {
                displayKey: 'name',
                templates: {
                    header: this.structure_header_template,
                    suggestion: function suggestion (data) {
                        return that.structure_template(data);
                    }
                },
                source: client.initIndex('<%= Structure.index_name %>').ttAdapter({ hitsPerPage: 7, optionalWords: optionalSearchWords })
            });
        },

        announce: function announce (e, data) {
            var new_action;
            if (data.type == 'structure') {
                window.location.href = data.url;
                return;
            } else {
                this.selected_subject = data;
            }
            var city = this.$city_input.val() || $.cookie('city') || 'paris';
            city = city.replace(/[^A-Za-z]/g, '-').toLowerCase();
            if (this.selected_subject && this.selected_subject.depth == 0) {
                new_action = Routes.root_search_page_path(this.selected_subject.slug, city);
                this.$subjects_input.removeAttr('name'); // Remove name attribute to prevent word ending in the keywords filter
            } else if (this.selected_subject) {
                new_action = Routes.search_page_path((this.selected_subject.root || this.selected_subject.slug), this.selected_subject.slug, city);
                this.$subjects_input.removeAttr('name'); // Remove name attribute to prevent word ending in the keywords filter
            } else {
                this.$subjects_input.attr('name', 'name');
                new_action = Routes.root_search_page_without_subject_path(city);
            }
            this.$element.attr('action', new_action);
        }.debounce(GLOBAL.DEBOUNCE_DELAY),


        // Clears all the given filters
        clear: function clear (filters) {
            this.ui.$subjects_input.val('');
            this.announce();
        }
    });
});

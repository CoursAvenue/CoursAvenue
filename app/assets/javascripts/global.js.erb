// Adding JavaScript functions
// ----------------------------------------------

// ----------------------- BIND Fuction
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function () {},
        fBound = function () {
          return fToBind.apply(this instanceof fNOP && oThis
                                 ? this
                                 : oThis,
                               aArgs.concat(Array.prototype.slice.call(arguments)));
        };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();

    return fBound;
  };
}


/* wow debounce! Call it like this:
 *
 *   wat: function () {
 *
 *   }.debounce(500),
 *
 * Remeber that the function will still be called with "this" bound
 * to whatever it would normally be called with. So if you pass wat
 * as an event handler, it will not have a Marionette object as its
 * this, unless you also bind it to this in the context of the Marionette
 * object.
 *
 *   this.on("click", this.wat); // NO!
 *   this.on("click", this.wat.bind(this)); // OK!
 *
 *   wat: function () {
 *
 *   }.debounce(500).bind(this), // Sure, why not!?
 *
 * */
if (!Function.prototype.debounce) {
    Function.prototype.debounce = function (time) {
        if (typeof this !== "function") {
          // closest thing possible to the ECMAScript 5 internal IsCallable function
          throw new TypeError("Function.prototype.debounce - what is trying to be bound is not callable");
        }

        var args      = Array.prototype.slice.call(arguments, 0), // put the arguments into an arra
            wait      = args.shift(), // the first is the wait
            immediate = (args.shift() === undefined)? false : true; // the second is the "immediate" flag

        return _.debounce(this, wait, immediate);
    }
}


// In case pushState function does not exist
if (_.isUndefined(window.history.pushState)) {
    window.history.pushState = function pushState () { return ''; }
}

/*
    Usage:
    <form  data-behavior='coursavenue-search' />
*/
;(function ( $, window, document, undefined ) {

    // Create the defaults once
    var pluginName = "subjectsStructuresPicker",
        defaults   = {};

    // The actual plugin constructor
    function Plugin( element, options ) {
        this.element  = element;
        this.$element = $(element);

        // jQuery has an extend method that merges the
        // contents of two or more objects, storing the
        // result in the first object. The first object
        // is generally empty because we don't want to alter
        // the default options for future instances of the plugin
        this.options = $.extend( {}, defaults, options) ;

        this._defaults = defaults;
        this._name = pluginName;

        this.init();
    }

    Plugin.prototype = {

        init: function init () {
            var structure_template, subjects_template, structure_header_template, subjects_header_template;
            this.data = { city: 'paris' };
            this.$address_input  = this.$element.find('[data-type=address]');
            this.$city_input     = this.$element.find('[name=city]')
            // Check if the element has already been initialized before doing the stuff
            if (this.$address_input.length > 0) { this.$address_input.addressPicker(); }
            if (this.$element.hasClass('tt-hint')) { return; }
            var input_subject_filter = new CoursAvenue.Views.InputSubjectFilterView({ el: '[data-type=subjects]' });
            this.$element.submit(function(event) {
                var city = this.$city_input.val() || $.cookie('city') || 'paris';
                _.extend(this.data, { city: city });
                new_action = CoursAvenue.searchPath(this.data);
                input_subject_filter.ui.$subjects_input.removeAttr('name');
                this.$element.attr('action', new_action);
                return true;
            }.bind(this));
            input_subject_filter.render();
            input_subject_filter.on('filter:subject_input', function(data) {
                _.extend(this.data, data);
            }.bind(this));
        }
    };

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.fn[pluginName] = function ( options ) {
        return this.each(function () {
            if (!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" + pluginName,
                new Plugin( this, options ));
            }
        });
    }

})( jQuery, window, document );

$(function() {
    var subjects_structures_picker_initializer = function() {
        $('[data-behavior=coursavenue-search]').subjectsStructuresPicker();
    };
    GLOBAL.initialize_callbacks.push(subjects_structures_picker_initializer);
});

- structure           = comment.structure if structure.nil?
- show_structure_logo = false             if show_structure_logo.nil?
- with_link           = false             if with_link.nil?
- show_title          = true              if show_title.nil?
- small_avatar        = false             if small_avatar.nil?
- class_name          = ''                if class_name.nil?
- with_reply          = false             if with_reply.nil?
%li.push--bottom.hard--left{ class: class_name, id: "recommandation-#{comment.id}" }
  %article{ itemprop: 'review', itemscope: true, itemtype:'http://schema.org/Review' }
    .grid--full
      .grid__item.two-twelfths.text--center>
        - if show_structure_logo
          = image_tag structure.logo.url(:thumb), height: (small_avatar ? 30 : 60), width: (small_avatar ? 30 : 60)
        - else
          - if comment.user
            = image_tag comment.user.avatar_url(:small), height: (small_avatar ? 30 : 60), width: (small_avatar ? 30 : 60), class: 'bordered rounded--circle'
        .text--center
          %strong= comment.author_name
          %br
          %i.opacity-75{ itemprop: 'datePublished', content: l(comment.created_at, format: :iso_date) }
            Il y a #{distance_of_time_in_words_to_now comment.created_at}
          - if current_pro_admin and current_pro_admin.super_admin?
            .break-word (#{comment.email})
            = icon_rating(comment, 'fa-2x')

      .grid__item.eight-twelfths>
        - # User can share if:
        - #   - comment is accepted
        - #   - user is owner
        .gray-box.soft-half.rounded--top.message__appendix
          - if comment.title.present?
            %h6.quoted.inline-block.push-half--bottom{itemprop: 'headline', content: comment.title}= "#{comment.title}"
            - if comment.course_name
              %span.v-middle= "— #{comment.course_name.capitalize}"

            - if can?(:destroy, comment)
              - if comment.pending?
                %span.lbl--small.lbl.lbl--orange.nowrap Avis en cours de validation
              - elsif comment.declined?
                %span.lbl.lbl--red.nowrap Avis rejeté
          %span.rating{title: 'Excellent !', itemprop: 'reviewRating', itemscope: true, itemtype: 'http://schema.org/Rating'}
            %meta{itemprop: 'ratingValue', content: 5}
            %meta{itemprop: 'worstRating', content: 1}
            %meta{itemprop: 'bestRating', content: 5}
          .read-more{ itemprop: 'reviewBody', data: { behavior: 'read-more' } }
            = simple_format comment.content
          - if with_link
            %p.text--right.flush
              = link_to comment.commentable.name, commentable_url(comment), target: '_blank'
          .visuallyhidden{itemprop: 'itemReviewed', itemscope: true, itemtype: 'http://schema.org/Thing'}
            %meta{itemprop: 'url', content: commentable_url(comment)}
            %meta{itemprop: 'name', content: comment.commentable.name}

      .grid__item.two-twelfths.soft>
        - if with_reply
          %div{ id: "comment-reply-#{comment.id}" }
            - if comment.reply
              = render partial: 'comments/reply', locals: { structure: @structure, comment: comment, reply: comment.reply }
        - if comment.user
          = succeed ' ' do
            - if comment.associated_message_id
              - message = Mailboxer::Message.find comment.associated_message_id
              = link_to pro_structure_conversation_path(structure, message.conversation, return_to: request.fullpath, message: { subject: "Merci beaucoup pour ta recommandation", recipients: [comment.user.user_profile_for(structure).id] }), class: 'btn btn--small btn--blue fancybox.ajax', data: {  toggle: 'tooltip', behavior: 'modal', width: '780', padding: 0 }, title: "Répondre par un message privé à #{comment.author_name}", onclick: "ga('send', 'event', 'Answer to student', 'click')" do
                %i.fa.fa-envelope-o.v-middle
                %span.v-middle Répondre
            - else
              = link_to new_pro_structure_message_path(structure, return_to: request.fullpath, message: { subject: "Merci beaucoup pour ta recommandation", recipients: [comment.user.user_profile_for(structure).id] }), class: 'btn btn--small btn--blue fancybox.ajax', data: {  toggle: 'tooltip', behavior: 'modal', width: '780' }, title: "Répondre par un message privé à #{comment.author_name}", onclick: "ga('send', 'event', 'Answer to student', 'click')" do
                %i.fa.fa-envelope-o.v-middle
                %span.v-middle Répondre
        - if comment.persisted? and !comment.waiting_for_deletion?
          = succeed ' ' do
            .inline-block.drop-down__wrapper{data: {behavior: 'drop-down', el: '> .drop-down__el', position: 'right'}}
              %a.btn.btn--small{ href: 'javascript:void(0)', data: { behavior: 'tooltip', html: 'true', title: "Signaler&nbsp;un&nbsp;incident&nbsp;à l'équipe&nbsp;CoursAvenue" } }
                %i.fa.fa-flag.v-middle
                Signaler
                %i.fa.fa-chevron-down.soft-half--left
              %ul.drop-down__el.text--left
                - t('comments.deletion_reasons').each do |i18n_key, traducted_string|
                  %li.nowrap
                    = link_to ask_for_deletion_pro_structure_comment_path(structure, comment, deletion_reason: "comments.deletion_reasons.#{i18n_key.to_s.downcase}"), method: :patch do
                      = traducted_string
        - if current_pro_admin.super_admin?
          .inline-block.drop-down__wrapper{data: {behavior: 'drop-down', el: '> .drop-down__el', position: 'right'}}
            %a.btn.btn--small{href: 'javascript:void(0)'}
              %i.fa.fa-cogs
              %i.fa.fa-chevron-down.soft-half--left
            %ul.drop-down__el.text--left
              - if comment.persisted? and can?(:destroy, comment)
                - if comment.waiting_for_deletion?
                  %li.nowrap
                    = link_to recover_pro_comment_path(comment), method: :patch do
                      %i.fa.fa-check
                      Rétablir
                %li.nowrap
                  = link_to edit_pro_comment_path(comment) do
                    %i.fa.fa-pencil
                    Modifier
                %li.nowrap
                  = link_to pro_comment_path(comment), method: :delete do
                    %i.fa.fa-trash-o
                    Supprimer

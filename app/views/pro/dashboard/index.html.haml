= side_menu_currently_at 'dashboard'
.panel
  = render partial: 'pro/shared/dashboard_tabs', locals: { current: 'dashboard' }
  .panel__body.soft
    .grid
      .grid__item.one-quarter.bordered--right>
        .soft-half.text--center
          %h3.flush= "#{Admin.normal.count} profs"
          %h6.flush dont #{Admin.where( Admin.arel_table[:created_at].gt(Date.today) ).count} aujourd'hui
          %div et #{Admin.where( Admin.arel_table[:created_at].gt(Date.today - 7.days) ).count} les 7 derniers jours
      .grid__item.one-quarter.bordered--right>
        .soft-half.text--center
          %h3.flush= "#{Comment::Review.count} avis"
          %h6.flush dont #{Comment::Review.where( Comment::Review.arel_table[:created_at].gt(Date.today) ).count} aujourd'hui
          %div et #{Comment::Review.where( Comment::Review.arel_table[:created_at].gt(Date.today - 7.days) ).count} les 7 derniers jours
      .grid__item.one-quarter.bordered--right>
        .soft-half.text--center
          %h3.flush= "#{Mailboxer::Conversation.where( subject: I18n.t(Mailboxer::Label::INFORMATION.name) ).count} mess"
          %h6.flush
            dont
            = Mailboxer::Conversation.where( Mailboxer::Conversation.arel_table[:subject].eq(I18n.t(Mailboxer::Label::INFORMATION.name)).and(Mailboxer::Conversation.arel_table[:created_at].gt(Date.today)) ).count
            aujourd'hui
          %div et #{Mailboxer::Conversation.where( Mailboxer::Conversation.arel_table[:subject].eq(I18n.t(Mailboxer::Label::INFORMATION.name)).and(Mailboxer::Conversation.arel_table[:created_at].gt(Date.today - 7.days)) ).count} les 7 derniers jours
      .grid__item.one-quarter>
        .soft-half.text--center
          %h3.flush= "#{CommentNotification.count} élèves"
          %h6.flush dont #{CommentNotification.where( CommentNotification.arel_table[:created_at].gt(Date.today) ).count} aujourd'hui
          %div et #{CommentNotification.where( CommentNotification.arel_table[:created_at].gt(Date.today - 7.days) ).count} les 7 derniers jours


  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-envelope-o
      Actions / mois
    .text--center
      #messages-months
  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-marker
      Professeurs enregistrés / Avis laissés (non cumulé)
    .text--center
      .gamma
        = Admin.normal.count
        profs
        \/
        = Comment::Review.count
        avis
      #admins

    .text--center
      .gamma
        = Admin.normal.count
        profs

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-envelope-o
      Demande d'infos
    .text--center
      .gamma
        = Mailboxer::Conversation.where( subject: I18n.t(Mailboxer::Label::INFORMATION.name) ).count
        Messages
      #messages
      #admins2

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-marker
      Professeurs enregistrés / Avis laissés - progression / semaine (non cumulé)
    .text--center
      #comments-admins-progression-weekly

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-marker
      Professeurs enregistrés / Avis laissés - progression (cumulé)
    .text--center
      .gamma
        = Admin.normal.count
        profs
        \/
        = Comment::Review.count
        avis
      #admins-progression

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-group
      Élèves notifiés pour avis
    .text--center
      .gamma
        = User.count
        élèves
      #students

  - if params[:with_subjects]
    %h3
      %i.fa.fa-map-marker
      Nombre d'établissements par disciplines (dont le prof est enregistré)
    .text--center
      #subjects
  - else
    %p.text--center= link_to 'Voir la répartition par discipline',  pro_dashboard_path(with_subjects: true), class: 'btn btn--blue'


  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-youtube-play
      Photos & Vidéos
    .text--center
      .gamma
        = Media::Video.count
        Vidéos /
        = Media::Image.count
        Photos
      #medias

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-list
      Cours en ligne
    .text--center
      .gamma
        = Course.active.count
        cours en ligne
      #courses

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-marker
      Lieux d'enseignement
    .text--center
      .gamma
        = Place.count
        Lieux

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-time
      Heures de création de profil
    .text--center
      #admins-hours

  %hr.push--ends
  .soft--sides
    %h3
      %i.fa.fa-map-time
      Heures de dépot d'avis
    .text--center
      #comments-hours
    .text--center= link_to 'Mots clés', pro_keywords_path, class: 'btn btn--blue'
    .text--center= link_to 'Mots clés tapé par les utilisateurs', pro_search_term_logs_path, class: 'btn btn--blue'

= content_for :scripts do
  :javascript
    $(function() {
        new Highcharts.Chart({
            chart: { renderTo: 'admins-hours', type: 'column' },
            title: { text: null },
            xAxis: { categories: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"] },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@admins_by_hour.map{|key, value| value}},
                name: 'Profs inscrits'
               }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'comments-hours', type: 'column' },
            title: { text: null },
            xAxis: { categories: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"] },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@comments_by_hour.map{|key, value| value}},
                name: 'Profs inscrits'
               }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'admins2', type: 'column' },
            title: { text: null },
            xAxis: { categories: ['0', '1-4', '5-10', '+ de 10'] },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@admins2.map{|count| count}},
                name: 'Profs inscrits'
               }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'admins', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@comments_hash.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@admins_hash.map{|date, count| count}},
                name: 'Profs inscrits'
               },
              { data: #{@comments_hash.map{|date, count| count}},
                name: 'Avis'
              }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'comments-admins-progression-weekly', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@admins_weekly.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@admins_weekly.map{|date, count| count}},
                name: 'Profs inscrits'
               },
              { data: #{@comments_weekly.map{|date, count| count}},
                name: 'Avis'
              }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'admins-progression'},
            title: { text: null },
            xAxis: { categories: #{@admins_progression.map{|date, count| l((date), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@admins_progression.map{|date, count| count}},
                name: 'Profs inscrits'
               },
              { data: #{@comments_progression.map{|date, count| count}},
                name: 'Avis'
              }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'students', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@students.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [{ data: #{@students.map{|date, count| (count > 10000 ? 100 : count)}} }]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'messages-months', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@messages_per_months.map{|date, count| date}} },
            yAxis: { title: { text: ''}},
            plotOptions: {
                column: {
                    stacking: 'normal',
                    dataLabels: {
                        enabled: true,
                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                        style: {
                            textShadow: '0 0 3px black, 0 0 3px black'
                        }
                    }
                }
            },
            legend: {
                align: 'right',
                x: -70,
                verticalAlign: 'top',
                y: 20,
                floating: true,
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            series: [
              { name: "Demande d'infos", data: #{@messages_per_months.map{|date, count| count}} },
              { name: "Site web", data: #{@actions_website_per_months.map{|date, count| count}} },
              { name: "Telephone", data: #{@actions_phone_per_months.map{|date, count| count}} }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'messages', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@messages.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [{ data: #{@messages.map{|date, count| count}} }]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'medias', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@medias_dates.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [
              { data: #{@videos.sort.map{|date, count| count}},
                name: 'Vidéos'
               },
              { data: #{@images.sort.map{|date, count| (count > 1200 ? 10 : count)}},
                name: 'Photos'
              }
            ]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'courses', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@courses.map{|date, count| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}},
            series: [{ data: #{@courses.map{|date, count| count}} }]
        });
    });

- if params[:with_subjects].present?
  = content_for :scripts do
    :javascript
      $(function() {
        new Highcharts.Chart({
            chart: { renderTo: 'subjects', type: 'column' },
            title: { text: null },
            xAxis: { categories: #{@structures.map{|subject_name, count| subject_name}} },
            yAxis: { title: { text: ''}},
            series: [{ data: #{@structures.map{|subject_name, count| count}} }]
        });
    });

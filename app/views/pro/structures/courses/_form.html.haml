- if @course.new_record?
  - return_to_action = "$('[data-action=new_course][data-course-type=#{@course.underscore_name}]').click();"
- else
  - return_to_action = "$('[data-course-id=#{@course.id}][data-action=edit]').click();"

- if @course.new_record?
  - url = pro_structure_courses_path(@structure)
- else
  - url = pro_structure_course_path(@structure, @course)

#loader.text--center.island{ style: 'height: 600px;'}
  = image_tag 'gifs/loading-indicator-circle.gif', class: 'center-block', height: 20, style: 'margin-top: 290px;'
#content.hidden
  = simple_form_for [:pro, @structure, @course], url: url, as: :course, html: { id: 'course-form' }, remote: true do |f|
    = f.input :type, as: :hidden
    .panel
      .panel__header.soft
        %h4.flush.inline-block.v-middle
          %span.v-middle
            - if @course.is_training?
              Nom du stage / de l'atelier
            - else
              Nom du #{@course.type_name.downcase}
          = f.input :name, label: false, input_html: { class: 'input--large', style: 'width: 20em;' }, wrapper_html: { class: 'inline-block v-middle flush--ends push-half--left' }
        %p.flush
          %i.blue
            Un bon nom doit être court et explicite : aucune information sur le lieu, l'âge ou le niveau.

      .panel__body.soft--ends
        .soft--sides
          .input.chosen-input.flush--bottom>
            = f.label :subjects, class: 'label--large nowrap'
            - subjects = @structure.subjects.little_children.uniq
            - if subjects.empty?
              - subjects = @structure.subjects.roots.map(&:little_children).flatten
            .input-container>
              = f.association :subjects , as: :select, collection: subjects, input_html: { class: 'input--large hard', data: { behavior: 'chosen', placeholder: 'Sélectionnez une ou plusieurs disciplines' }, multiple: true }, label: t('.subjects'), selected: @course.subject_ids, label_method: lambda{|subj| subj.name }, wrapper_html: { class: 'flush' }, label: false
              = link_to add_subjects_pro_structure_path(@structure, return_to_action: return_to_action, anchor: 'informations'), class: 'line-height-2 fancybox.ajax', data: { behavior: 'modal', width: 650, lock_overlay: true } do
                %i.fa.fa-plus
                Ajouter des disciplines à mon profil

        - if @course.is_lesson? or @course.is_private?
          - @course.prices.build(type: 'Price::Trial', amount: 0) if @course.prices.empty?
        - else
          - 5.times { @course.prices.build(type: 'Price::BookTicket', number: 1) }
        .soft--sides{ data: { behavior: 'show-more-on-demand' } }
          - if @course.is_training?
            .input
              .control-label> &nbsp;
              .input-container
                .flexbox
                  .flexbox__item.text--center.two-twelfths
                    %strong Tarif normal
                  .flexbox__item.text--center.two-twelfths
                    %strong Tarif promotionnel
                  .flexbox__item.text--center.eight-twelfths
                    %strong Infos
          - @course.prices.each_with_index do |price, index|
            - price = price.localized
            .input{ data: { el: true, hidden: (!price.persisted? and index > 0) } }
              = f.simple_fields_for :prices, price, child_index: index do |price_form|
                = price_form.input :type, as: :hidden
                - if @course.is_training?
                  = price_form.input :number, as: :hidden
                - if @course.is_lesson? or @course.is_private?
                  = f.label :trial_price, "Prix séance d'essai", class: 'inline-block label--large control-label'
                - else
                  = f.label :trial_price, "Tarif", class: 'inline-block label--large control-label'
                - if @course.is_lesson? or @course.is_private?
                  %select.push-half--right.input--large.inline-block.v-middle{ data: { trial_select: true } }
                    %option{ value: 'free'    , selected: price.free? } Gratuit
                    %option{ value: 'not-free', selected: !price.free? } Payante
                %div.v-middle{ class: (price.free? ? 'hidden' : ''), data: { trial_price_input: true } }
                  - if @course.is_lesson? or @course.is_private?
                    %span.label--large.v-middle Tarif :
                  = price_form.input :amount, label: false, label_html: { class: 'label--large' }, input_html: { class: 'input--large flush text--center', style: 'width: 5em;', type: 'string', value: (price.amount ? price.amount.gsub(',00', '') : '' ), data: { amount: true } }, wrapper_html: { class: 'flush v-middle inline-block' }
                  %span.push-half--right.label--large.v-middle €
                  - if @course.is_training?
                    = price_form.input :promo_amount, label: false, label_html: { class: 'label--large' }, input_html: { class: 'input--large flush text--center', style: 'width: 5em;', type: 'string', value: (price.promo_amount ? price.promo_amount.gsub(',00', '') : '' )}, wrapper_html: { class: 'flush v-middle inline-block' }
                    %span.push-half--right.label--large.v-middle €
                  - if @course.is_training?
                    = price_form.input :info, as: :string, label: false, label_html: { class: 'label--large' }, input_html: { class: 'input--large flush', placeholder: 'Ex. : prix pour 2h', style: 'width: 300px' }, wrapper_html: { class: 'flush v-middle inline-block' }
              - if @course.prices.length > 1
                %a.cursor-pointer.v-middle.inline-block{ data: { clear: true } }
                  %i.fa-times


          - if @course.prices.length > 1
            .input
              .control-label
              %a.cursor-pointer{ data: { trigger: true } }
                %i.fa.fa-plus
                Ajouter un tarif

        - if @course.is_lesson?
          .soft--sides
            = f.input :frequency, as: :select, collection: Course::COURSE_FREQUENCIES, label_method: lambda {|course_frequency| t(course_frequency)}, default: Course::COURSE_FREQUENCIES.first, label: t('.frequency'), label_html: { class: 'label--large' }, input_html: { class: 'input--large' }
            .input.flush
              %label.control-label.label--large> Infos
              .input-container>
                %div
                  = f.input :cant_be_joined_during_year, label: false, wrapper_html: { class: 'inline-block v-middle' }, input_html: { class: 'input--large' }
                  %label.inline-block.v-middle.label--large{ for: 'course_cant_be_joined_during_year' }= Course.human_attribute_name :cant_be_joined_during_year

                %div
                  = f.input :no_class_during_holidays, label: false, wrapper_html: { class: 'inline-block v-middle' }, input_html: { class: 'input--large' }
                  %label.inline-block.v-middle.label--large{ for: 'course_no_class_during_holidays' }= Course.human_attribute_name :no_class_during_holidays

        .soft--sides
          .input
            = f.label :description, class: 'label--large'
            .input-container>
              = f.input :description, as: :text, label: false, input_html: { class: 'input--large one-whole', data: { behavior: 'text-counter', 'average-words-nb' => 20, 'good-words-nb' => 50, 'bad-text' => 'Votre description doit comporter au moins 20 mots. Nos Partenaires qui ont le plus de succès ont plus de 50 mots', 'average-text' => 'Encore quelques mots et vous aurez une superbe description !', 'good-text' => 'Superbe description !' } }, wrapper_html: { class: 'flush--top one-whole' }

          - if @course.is_private?
            .input
              %label.control-label.label--large.v-top> Lieux
              .input-container.v-middle>
                - home_place = @structure.places.homes.first
                %div
                  = f.input :teaches_at_home, input_html: { class: 'input--large', disabled: home_place.nil? }, label: false, wrapper_html: { class: 'inline-block v-middle' }
                  = f.label :teaches_at_home, class: "label--large inline-block v-middle width-auto hard #{home_place.nil? ? 'gray-light' : ''}"
                  - if home_place
                    .inline-block.v-middle.soft-half--left
                      %i.blue Dans un rayon de #{home_place.radius}km autour de #{home_place.city.try(:name)}.
                      = link_to edit_pro_structure_place_path(@structure, @structure.places.homes.first, type: 'Place::Home', return_to_action: return_to_action), class: 'fancybox.ajax', data: { behavior: 'modal', width: '650', padding: 0 } do
                        %i.fa-pencil
                        Modifier
                  - else
                    %div
                      = link_to new_pro_structure_place_path(@structure, type: 'Place::Home', return_to_action: return_to_action), class: 'fancybox.ajax', data: { behavior: 'modal', width: '650', padding: 0 } do
                        %i.fa.fa-plus
                        Ajouter la zone géographique pour mes cours à domicile
                %div
                  %label.inline-block.label--large{ for: 'course_place_id_checkbox' }
                    %input#course_place_id_checkbox{ type: 'checkbox', checked: @course.place.present? }
                    Les cours ont lieu à cette adresse :
                  = f.input :place_id, as: :select, collection: @structure.places.publics, input_html: { class: 'input--large', style: 'max-width: 13em;' }, label: false, wrapper_html: { class: 'flush inline-block v-middle' }, include_blank: (@structure.places.publics.length > 1 ? 'Sélectionnez une adresse' : false)
                - if @course.new_record?
                  - return_to_action = "$('[data-course-type=private][data-action=new_course]').click();"
                - else
                  - return_to_action = "$('[data-course-id=#{@course.id}][data-action=edit]').click();"
                = link_to new_pro_structure_place_path(@structure, type: 'Place::Public', return_to_action: return_to_action), class: 'fancybox.ajax', data: { behavior: 'modal', width: '650', padding: 0 } do
                  %i.fa.fa-plus
                  Ajouter un lieu

            = f.input :on_appointment, as: :select, collection: [["Cours particuliers selon des créneaux précis", false], ["Pas de créneau précis, uniquement sur demande", true]], label_html: { class: 'label--large' }, input_html: { class: 'input--large' }, label: 'Disponibilités', include_blank: false


            .nowrap
              = f.input :level_ids, as: :check_boxes, collection: Level.all, label_method: lambda {|level| t(level.name)}, label: t('planning.levels'), wrapper_html: { data: { behavior: 'checkbox-list' } }, label_html: { class: 'label--large v-middle' }, input_html: { class: 'input--large' }

            = f.input :audience_ids, as: :check_boxes, collection: Audience.all, label_method: lambda {|audience| t(audience.name)}, label: t('planning.audiences'), input_html: { class: 'input--large' }, label_html: { class: 'label--large v-middle' }

            .input#children-ages{class: f.object.audiences.include?(Audience::KID) ? '' : 'hidden'}
              %label.label--large.control-label.v-middle Âge pour les enfants (optionnel)
              %span.v-middle.label--large de
              = f.input :min_age_for_kid, label: false, input_html: { class: 'input--large', style: 'width: 5em;', value: f.object.min_age_for_kid || 0}, wrapper_html: {class: 'flush v-middle'}
              %span.v-middl.label--large  à
              = f.input :max_age_for_kid, label: false, input_html: { class: 'input--large', style: 'width: 5em;', value: f.object.max_age_for_kid || 18}, wrapper_html: {class: 'flush v-middle'}
              %span.v-middle ans

          %input#save-and-add-planning-input{ name: 'add_planning', type: 'hidden', value: 'true' }
          .grid.push--top
            .grid__item.two-tenths>
              %a.btn.btn--gray.btn--full{ onclick: '$.fancybox.close()' } Annuler
            .grid__item.eight-tenths>
              = f.submit (@course.is_private? ? 'Enregistrer et ajouter mes disponibilités' : 'Enregistrer et ajouter un créneau'), class: 'btn btn--green btn--full', data: { disable_with: 'Enregistrement en cours...' }, id: 'save-and-add-planning'
              - unless @course.new_record?
                .text--center= f.submit 'Enregistrer et revenir à mon planning', class: 'btn-as-link', id: 'save-and-leave', data: { disable_with: 'Enregistrement en cours...' }

:javascript
    $('#save-and-leave').click(function() {
        $('#save-and-add-planning-input').val('false');
    });
    $('textarea').textareaResizer();
    setTimeout(function() {
        $('#loader').hide();
        $('#content').show();
    }, 400);
    $('[data-trial-select]').change(function() {
        if ($(this).val() == 'free') {
            $('[data-amount]').val(0);
            $('[data-trial-price-input]').addClass('hidden');
        } else {
            $('[data-trial-price-input]').removeClass('hidden');
        }
    });
    $('[data-behavior=show-more-on-demand]').showMoreOnDemand();

- if @course.is_private?
  :javascript
      if ($('[name="course[audience_ids][]"]').length > 0) {
          $('[name="course[audience_ids][]"]').change(function(event) {
              if (event.target.value == '1') {
                  if (event.target.checked) {
                      $('#children-ages').removeClass('hidden');
                  } else {
                      $('#children-ages').addClass('hidden');
                  }
              }
          });
      }
      $('#course_place_id').change(function() {
          $('#course_place_id_checkbox')[0].checked = (this.value != '');
      });
      $('#course_place_id_checkbox').change(function() {
          if (this.checked == false) {
              $('#course_place_id').val('');
          }
      });
      $('#course_on_appointment').change(function() {
          if (this.value == 'true') {
              $('#save-and-add-planning-input').val('false');
              $('#save-and-add-planning').val('Enregistrer');
          } else {
              $('#save-and-add-planning-input').val('true');
              $('#save-and-add-planning').val('Enregistrer et ajouter mes disponibilités');
          }
      });
      $('#course_on_appointment').change()

- if @course.new_record?
  - url = pro_structure_courses_path(@structure)
- else
  - url = pro_structure_course_path(@structure, @course)

= simple_form_for [:pro, @structure, @course], url: url, as: :course, html: { id: 'course-form' }, remote: true do |f|
  = f.input :type, as: :hidden
  .panel
    .panel__header.soft
      %h4.flush.inline-block.v-middle
        %span.v-middle
          Nom du
          - if @course.is_lesson?
            cours :
          - else
            stage :
        = f.input :name, label: false, input_html: { class: 'input--large', style: 'width: 20em;' }, wrapper_html: { class: 'inline-block v-middle flush--ends push-half--left' }

      .inline-block.push-half--left.v-middle{ data: { toggle: 'popover', placement: 'bottom', html: 'true', content: t('pro.structures.courses.wizard.name'), trigger: 'hover' } }
        %i.fa.fa-lightbulb-o.fa-2x.blue

    .panel__body.soft--ends
      .soft--sides
        .input.chosen-input.flush--bottom>
          = f.label :subjects, class: 'label--large nowrap'
          - subjects = @structure.subjects.little_children.uniq
          - if subjects.empty?
            - subjects = @structure.subjects.roots.map(&:little_children).flatten
          .input-container>
            = f.association :subjects , as: :select, collection: subjects, input_html: { class: 'input--large hard', data: { behavior: 'chosen', placeholder: 'Sélectionnez une ou plusieurs disciplines' }, multiple: true }, label: t('.subjects'), selected: @course.subject_ids, label_method: lambda{|subj| subj.name }, wrapper_html: { class: 'flush' }, label: false
            = link_to add_subjects_pro_structure_path(@structure, return_to: pro_structure_courses_path(@structure), anchor: 'informations'), class: 'fancybox.ajax', data: { behavior: 'modal', width: 650 } do
              %i.fa.fa-plus
              Ajouter des disciplines à mon profil

      - if @course.is_lesson?
        .soft--sides
          .input.depend-on-reccurent-course{ data: { behavior: 'date-range', 'start-date' => '#course_start_date', 'end-date' => '#course_end_date' } }>
            %label.label--large.control-label{ for: 'course_start_date' } Date du premier et dernier cours
            = f.input :start_date, as: :string, label: false, input_html: { style: 'margin-right: 5px', class: 'datepicker-input input--large', value: (@course.start_date.present? ? l(@course.start_date) : l(Date.parse('15/09/2014'))), data: { behavior: 'datepicker' } }
            .soft--ends.inline-block -&nbsp;
            - next_june = Date.parse("28 June #{Date.today.year + 1}")
            = f.input :end_date, as: :string, label: false, input_html: { class: 'datepicker-input input--large', value: (@course.end_date.present? ? l(@course.end_date) : l(next_june)), 'data-behavior' => 'datepicker' }
          = f.input :frequency, as: :select, collection: Course::COURSE_FREQUENCIES, label_method: lambda {|course_frequency| t(course_frequency)}, default: Course::COURSE_FREQUENCIES.first, label: t('.frequency'), wrapper_html: { class: 'depend-on-reccurent-course' }, label_html: { class: 'label--large' }, input_html: { class: 'input--large' }
          .input.flush
            %label.control-label.label--large> Infos
            .input-container>
              %div
                = f.input :cant_be_joined_during_year, label: false, wrapper_html: { class: 'inline-block v-middle' }, input_html: { class: 'input--large' }
                %label.inline-block.v-middle.label--large{ for: 'course_cant_be_joined_during_year' }= Course.human_attribute_name :cant_be_joined_during_year

              %div
                = f.input :no_class_during_holidays, label: false, wrapper_html: { class: 'inline-block v-middle' }, input_html: { class: 'input--large' }
                %label.inline-block.v-middle.label--large{ for: 'course_no_class_during_holidays' }= Course.human_attribute_name :no_class_during_holidays

      .soft--sides
        .input
          = f.label :description, class: 'label--large'
          .input-container>
            = f.input :description, as: :text, placeholder: 'Décrivez en quoi consiste votre cours sans parler de tarif ni de planning.', label: false, input_html: { class: 'input--large one-whole', data: { behavior: 'text-counter', 'average-words-nb' => 20, 'good-words-nb' => 50, 'bad-text' => 'Votre description doit comporter au moins 20 mots. Nos Partenaires qui ont le plus de succès ont plus de 50 mots', 'average-text' => 'Encore quelques mots et vous aurez une superbe description !', 'good-text' => 'Superbe description !' } }, wrapper_html: { class: 'flush--top one-whole' }

        %input#save-and-add-planning-input{ name: 'add_planning', type: 'hidden' }
        .grid.push--top
          .grid__item.two-tenths>
            %a.btn.btn--gray.btn--full{ onclick: '$.fancybox.close()' } Annuler
          .grid__item.four-tenths>
            = f.submit 'Ajouter un créneau', class: 'btn btn--green btn--full push--bottom', data: { disable_with: 'Enregistrement en cours...' }, id: 'save-and-add-planning'
          .grid__item.four-tenths>
            = f.submit 'Enregistrer', class: 'btn btn--green btn--full push--bottom', data: { disable_with: 'Enregistrement en cours...' }

:javascript
    $('#save-and-add-planning').click(function() {
        $('#save-and-add-planning-input').val('true');
    });

- @planning ||= @course.plannings.build
- if @planning.persisted?
  - planning_url = pro_structure_course_planning_path(@structure, @course, @planning)
- else
  - planning_url = pro_structure_course_plannings_path(@structure, @course)

- minutes = (2..32).collect{ |i| time = i*15; ["#{(time/60).floor}h#{(time%60 == 0 ? '00' : time%60)}",time] }

= simple_form_for [:pro, @course, @planning], url: planning_url, html: { id: 'planning-form' }, remote: true do |f|
  .panel
    .panel__header.soft
      %h4.flush Planning de : #{@course.name}
      %p.flush
        %i.fa.fa-tags
        %i= @course.subjects.map(&:name).join(', ')
        - if @course.is_lesson?
          %br
          #{t(@course.frequency)}
          - if @course.start_date
            du #{l(@course.start_date)}
          - if @course.end_date
            au #{l(@course.end_date)}
      = link_to edit_pro_structure_course_path(@structure, @course), class: 'fancybox.ajax nowrap', data: { behavior: 'modal', width: '750', padding: '0' } do
        %i.fa.fa-pencil
        Modifier les informations générales
      - other_plannings = @course.plannings.ordered_by_day.reject{ |p| p.new_record? or p == @planning }
      - if other_plannings.any?
        %hr.push-half--ends
        %div
          %strong Créneaux enregistrés :
          - other_plannings.each do |planning|
            .lbl.lbl--gray-light
              - if @course.is_training?
                = training_dates planning
              - else
                = week_day_for(planning).try(:capitalize)
              = ": #{I18n.l(planning.start_time, format: :short)} - #{I18n.l(planning.end_time, format: :short)}"

    .panel__body.soft
      = f.error_notification
      - unless @course.is_private?
        = render partial: 'pro/structures/courses/plannings/place_input', locals: { f: f }

      = render partial: "pro/structures/courses/plannings/#{@course.underscore_name}_form", locals: { f: f }

      .input.flush--bottom{ data: { behavior: 'time-range', 'start-time-wrapper' => '#start-time-wrapper', 'end-time-wrapper' => '#end-time-wrapper' } }
        = f.label :start_time, class: 'control-label label--large' do
          %i.fa.fa-time
          Horaire
        = f.input :start_time, as: :time, minute_step: 15, default: { year: 2000, month: 1, day: 1, hour: 8, min: 00 }, wrapper_html: { id: 'start-time-wrapper', class: 'flush input-time--large' }, label: false, input_html: { class: 'input--large' }
        %span.label--large.v-middle.inline-block -
        = f.input :end_time, as: :time, minute_step: 15, min_hour: 7, label: false, default: { year: 2000, month: 1, day: 1, hour: 9, min: 00 }, wrapper_html: { id: 'end-time-wrapper', class: 'flush input-time--large'}, input_html: { class: 'input--large' }

      - unless @course.is_private?
        = f.input :level_ids, as: :check_boxes, collection: Level.all, label_method: lambda {|level| t(level.name)}, label: t('planning.levels'), wrapper_html: { data: { behavior: 'checkbox-list' } }, label_html: { class: 'label--large v-middle' }, input_html: { class: 'input--large' }

        = f.input :audience_ids, as: :check_boxes, collection: Audience.all, label_method: lambda {|audience| t(audience.name)}, label: t('planning.audiences'), input_html: { class: 'input--large' }, label_html: { class: 'label--large v-middle' }

        .input#children-ages{class: f.object.audiences.include?(Audience::KID) ? '' : 'hidden'}
          %label.label--large.control-label.v-middle Âge pour les enfants (optionnel)
          %span.v-middle.label--large de
          = f.input :min_age_for_kid, label: false, input_html: { class: 'input--large', style: 'width: 5em;', value: f.object.min_age_for_kid || 0}, wrapper_html: {class: 'flush v-middle'}
          %span.v-middl.label--large  à
          = f.input :max_age_for_kid, label: false, input_html: { class: 'input--large', style: 'width: 5em;', value: f.object.max_age_for_kid || 18}, wrapper_html: {class: 'flush v-middle'}
          %span.v-middle ans

      = f.input :info, as: :string, label: 'Information (optionnel)', label_html: { class: 'label--large' }, input_html: { class: 'input--large' }

      %input#save-and-add-planning-input{ name: 'add_planning', type: 'hidden' }
      .grid.push--top
        .grid__item.two-tenths>
          %a.btn.btn--gray.btn--full{ onclick: '$.fancybox.close()' } Annuler
        .grid__item.eight-tenths>
          = f.submit (@course.is_lesson? ? "Enregistrer et ajouter un autre créneau" : "Enregistrer et ajouter d'autres dates"), class: 'btn btn--green btn--full', data: { disable_with: 'Enregistrement en cours...' }, id: 'save-and-add-planning'
          %br
          .text--center= f.submit 'Enregistrer', class: 'btn-as-link', data: { disable_with: 'Enregistrement en cours...' }
          -# = f.submit (@course.is_lesson? ? "Ajouter un nouveau créneau" : "Ajouter d'autres dates"), class: 'btn btn--green btn--full', data: { disable_with: 'Enregistrement en cours...' }, id: 'save-and-add-planning'
        -# .grid__item.three-tenths>

:javascript
    if ($('[name="planning[audience_ids][]"]').length > 0) {
        $('[name="planning[audience_ids][]"]').change(function(event) {
            if (event.target.value == '1') {
                if (event.target.checked) {
                    $('#children-ages').removeClass('hidden');
                } else {
                    $('#children-ages').addClass('hidden');
                }
            }
        });
    }
    $('#save-and-add-planning').click(function() {
        $('#save-and-add-planning-input').val('true');
    });

= side_menu_currently_at 'pro_dashboard'

.panel
  = render partial: 'pro/shared/dashboard_tabs', locals: { current: 'users' }

  .push-half
    %input.input--large.one-whole#search-input{ type: 'text', placeholder: 'Cherchez un élève' }

  .panel__body.soft--ends
    .text--center
      .gamma
        #{User.active.count} élèves / #{Mailboxer::Conversation.where(Mailboxer::Conversation.arel_table[:mailboxer_label_id].eq_any([1,4])).count} messages
      #users

    .text--center
      .gamma
        Croissance élèves : #{((@users_cumul[Date.today] - @users_cumul[Date.today - 1.month]).to_f / @users_cumul[Date.today - 1.month].to_f * 100).round(1)}%
        %br
        Croissance messages : #{((@messages_cumul[Date.today] - @messages_cumul[Date.today - 1.month]).to_f / @messages_cumul[Date.today - 1.month].to_f * 100).round(1)}%
      #users-cumul

    .text--center.push--ends
      = link_to 'Avec avis', pro_users_path(with_comments: true), class: 'btn btn--blue btn--small push-half--right'
      = link_to 'Inactif', pro_users_path(inactive: true), class: 'btn btn--blue btn--small'

    .text--center.push-half--ends= paginate @users, window: 1, outer_window: 3
    %table.table--striped#dataTable
      %thead
        %tr
          %th
          %th
            %span Nom
          %th
          %th
            %span Date d'inscription
          %th.text--center
            %span Facebook
          - if params[:with_comments]
            %th.text--center
              %span Dernier avis
      %tbody
        - @users.each do |user|
          %tr
            %td.text--center
              = image_tag user.avatar_url(:small), height: 40, class: 'rounded--circle'
            %td
              = user.name
              = link_to "(#{user.email})", "mailto:#{user.email}"
            %td
              = link_to 'Profil', user_url(user, subdomain: CoursAvenue::Application::WWW_SUBDOMAIN), target: :_blank
            %td{data: {value: user.confirmed_at}}
              - if !user.confirmed?
                = link_to 'Activer le compte', activate_pro_user_path(user), method: :patch, class: 'btn btn--small btn--blue'
                %br
              - else
                = l(user.created_at, format: :date).capitalize
            %td.text--center{data: {value: (user.provider == 'facebook' ? 'f' : '')}}
              - if user.provider == 'facebook'
                %i.fa.fa-check
            - if params[:with_comments]
              %td{data: {value: user.created_at}}
                - comment = user.comments.last
                - if comment
                  = link_to "Voir l'avis", structure_url(comment.structure, anchor: "recommandation-#{comment.id}", subdomain: CoursAvenue::Application::WWW_SUBDOMAIN)

    .text--center.push-half--ends= paginate @users, window: 1, outer_window: 3

%script#user-item-template{:type => 'text/x-handlebars-template'}
  %div{ style: 'font-size: 13px;' }
    {{name}} ({{email}})

= content_for :scripts do
  :javascript
    $(function() {
        $('#dataTable').tablesorter();
        new Highcharts.Chart({
            chart: { renderTo: 'users', type: 'spline' },
            title: { text: null },
            xAxis: { categories: #{@dates.map{|date| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: { title: { text: ''}, min: 0 },
            series: [{ data: #{@users_graph.sort_by{|date, count| date}.map{|date, count| count}},
                       type: 'column',
                       name: 'Élèves'
                      }, {
                       data: #{@messages_graph.sort_by{|date, count| date}.map{|date, count| count}},
                       type: 'column',
                       name: 'Messages'
                     }]
        });
        new Highcharts.Chart({
            chart: { renderTo: 'users-cumul', type: 'spline' },
            title: { text: null },
            xAxis: { categories: #{@dates.map{|date| l(Date.parse(date.to_s), format: :short)}} },
            yAxis: [{ title: { text: ''}}, { title: { text: ''}}],
            series: [{
                      data: #{@users_cumul.sort_by{|date, count| date}.map{|date, count| count}},
                      name: 'Élèves',
                      yAxis: 0
                    }, {
                      data: #{@messages_cumul.sort_by{|date, count| date}.map{|date, count| count}},
                      name: 'Messages',
                      yAxis: 1
                    }]
        });
        var template = Handlebars.compile($('#user-item-template').html());
        var engine   = new Bloodhound({
          datumTokenizer: function(d) { return Bloodhound.tokenizers.whitespace(d.num); },
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          remote: Routes.pro_users_path({format: 'json'}) + '?name=%QUERY'
        });
        engine.initialize();
        $('#search-input').typeahead({
            highlight : true
          }, [
          {
            templates: {
                suggestion: template
            },
            limit: 10,
            source: engine.ttAdapter()
          }
        ]);
        $('#search-input').on('typeahead:selected', function(event, data){
            window.open('https://www.coursavenue.com/eleves/' + data.slug);
        });
    });

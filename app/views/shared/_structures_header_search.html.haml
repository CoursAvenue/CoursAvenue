- params[:sort]                ||= 'relevancy'
- params[:radius]              ||= 5
%section
  - if @subject
    - search_path = subject_structures_path(@subject)
  - else
    - search_path = structures_path

  = form_tag search_path, method: :get, authenticity_token: false, class: 'g one-whole', id: 'header-search' do
    .header-search-bar
      %div.search-input-wrapper.relative{style: 'display: block;'}
        %input#search-input{size: 50, class: 'search-input', placeholder: 'Que voulez-vous faire ?', type: 'search', name: 'name', value: params[:name], autofocus: true, autocomplete: 'off'}
      %div.search-input-wrapper
        .input-with-icon
          %input#adress-picker{size: 50, class: 'search-input', placeholder: 'OÃ¹ ?', type: 'text', autocomplete: 'off', name: 'address_name', value: (params[:address_name] || request.location.city || 'Paris'), data: {behavior: 'address-picker', lng: '#address-lng', lat: '#address-lat', city: '#address-city'}}
          %i.icon-map-marker.delta
      %input#address-lat{type: 'hidden', name: 'lat', value: (params[:lat] || (request.location.latitude != 0 ? request.location.latitude : nil))}
      %input#address-lng{type: 'hidden', name: 'lng', value: (params[:lng] || (request.location.longitude != 0 ? request.location.longitude : nil))}
      %input#address-city{type: 'hidden', name: 'city', value: (params[:city] || request.location.city)}

      %div.button-wrapper
        %button.nowrap.btn.btn--primary{type: 'submit', id: 'submit_search_form'}
          %i.icon-search
          Rechercher
    .accessibility
      %input#hidden-sort-input{type: 'hidden', name: 'sort', value: params[:sort]}
      %input#radius-hidden-input{type: 'hidden', name: 'radius', value: params[:radius]}

%script#structure-item-template{:type => 'text/x-handlebars-template'}
  .grid--full
    .grid__item.v-middle{style: 'width: 20px;'}>
      %i.icon-user
    .grid__item.v-middle.eleven-twelfths.nowrap{style: 'width: 88%;'}>
      {{name}}
      %br
      %i.line-height-1 {{city.name}}
= content_for :scripts do
  :javascript
    $(function() {
        var template = Handlebars.compile($('#structure-item-template').html());
        $('#search-input').typeahead([
          {
            name: 'subjects',
            prefetch: '/subjects.json'
          },
          {
            name: 'structure',
            valueKey: 'name',
            template: template,
            remote: {
              url: '/etablissements.json',
              replace: function(url, uriEncodedQuery) {
                  if ($('#address-lat').val().length > 0) {
                      return url + '?name=' + uriEncodedQuery + '&lat=' + $('#address-lat').val() + '&lng=' + $('#address-lng').val() + '&radius=' + $('#radius-hidden-input').val();
                  } else {
                      return url + '?name=' + uriEncodedQuery + '&radius=10';
                  }
              }
            }
          }
        ]);
        $('#search-input').on('typeahead:selected', function(event, data){
            // If it is a structure
            if (data.hasOwnProperty('structure_type')) {
                window.location = '/etablissements/' + data.slug
            }
        });
    })

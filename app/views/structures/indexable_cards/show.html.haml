- if @course.media
  = content_for :meta_image do
    = @course.media.image.try(:url)
- elsif @structure.medias.count > 0
  = content_for :meta_image do
    = @structure.medias.cover_first.videos_first.first.image.try(:url)
- elsif @structure.logo.present?
  = content_for :meta_image do
    = @structure.logo.url

- dominant_root_subject_slug = @course.dominant_root_subject.try(:slug)

= content_for :title do
  - if @place.present?
    = truncate_html("#{@course.name} avec #{@structure.name} à #{@place.name} | CoursAvenue.com", length: 75)
  - else
    = truncate_html("#{@course.name} avec #{@structure.name} | CoursAvenue.com", length: 75)

= content_for :meta_description do
  - if @place.present?
    = "#{@course.name} avec #{@structure.name} à #{@place.name} : Cours d'essai gratuits, avis des élèves, reservation en ligne."
  - else
    = "#{@course.name} avec #{@structure.name} : Cours d'essai gratuits, avis des élèves, reservation en ligne."
- home_place = (@course.is_private? ? @course.home_place : nil)
= render 'course_header'
.soft--sides.soft-half--top.palm-hard#presentation
  .grid--full.soft--top
    .grid__item.eight-twelfths.palm-one-whole.soft-half--right.palm-hard>
      .bg-white.bordered.push--bottom
        .soft
          .grid
            .grid__item.v-top.one-fifth.text--center.palm-one-whole>
              - if @structure.logo.present?
                = image_tag @structure.logo.url(:small_thumb_100), height: 100, width: 100, data: { src2x: @structure.logo.url(:thumb) }
              - else
                .inline-block.rounded--circle-100.white.text--center{ class: "bg-#{dominant_root_subject_slug}" }
                  %i.fa.fa-user-big.alpha
            .grid__item.v-top.four-fifths.palm-one-whole>
              - if @structure.comments_count and @structure.comments_count > 0
                .float--right.epsilon
                  = link_to '#avis', class: 'muted-link blue-green f-weight-bold', data: { behavior: 'scroll-to', offset_top: '-50' } do
                    = "#{@structure.comments_count} avis"
                    %i.fa.fa-coursavenue-marker-logo
              %h1.flush= @indexable_card.name
              %h2.delta.flush
                Par
                = link_to @structure.name, structure_path(@structure)
              = react_component('SubjectList', { classes: 'text--left', follow_links: true, colored: true, subject_list: ActiveModel::ArraySerializer.new(@indexable_card.subjects.at_depth(2), each_serializer: SubjectListSerializer) })

        - if @structure.medias.any?
          .push--bottom
            = render partial: 'gallery', locals: { medias: @structure.medias.cover_first.videos_first, structure: @structure }
        .soft--sides.soft--bottom.last-p-flush
          - if @course.description.present?
            .epsilon.line-height-1-3.read-more{ data: { behavior: 'read-more', height: '240' } }
              = simple_format @course.description
          - elsif @structure.description.present?
            .epsilon.line-height-1-3.read-more{ data: { behavior: 'read-more', height: '240' } }
              = simple_format @structure.description
          - else
            %p Pas de description.

      .soft--sides.soft-half--ends.bg-blue.white.border-color-blue-darker.bordered--sides.bordered--top#planning
        .grid
          .grid__item.one-half.palm-one-whole.v-middle>
            %h2.flush
              %i.fa.fa-clock.v-middle
              %span.v-middle Planning
          .grid__item.one-half.palm-one-whole.v-middle.text--right.palm-text--left>
            - if @course.prices.any?
              .white.nowrap.delta
                - if @course.is_training?
                  %strong #{readable_amount(@course.prices.first.amount)}
                - else
                  - if @course.prices.first.free?
                    %strong Cours d'essai gratuit
                  - else
                    %strong Cours d'essai à #{readable_amount(@course.prices.first.amount)}

      .bordered--sides.bg-white.soft-half--top.push--bottom
        = react_component('Course', { hide_description: true, show_footer: true, structure_id: @structure.id, indexable_card_id: @indexable_card.id }, { prerender: false })
        .soft--sides
          - if @course.is_private? and @course.on_appointment?
            .push-half--right.push-half--bottom.inline-block.v-middle
              %i.delta.fa.fa-audiences.v-middle
              %span.v-middle= join_audiences(@course)
            .push-half--right.push-half--bottom.inline-block.v-middle
              %i.delta.fa.fa-levels.v-middle
              %span.v-middle= join_levels_text(@course)

      .push--bottom
        = react_component('MessageThreadList', { structure: @serialized_structure, indexable_card_id: @indexable_card.id })

      = react_component('CommentList', { structure: @serialized_structure })

    .grid__item.four-twelfths.palm-one-whole.palm-hard>
      .push--bottom
        .on-top-of-the-world{ data: { behavior: 'sticky', old_width: 'true', stop_at_el: '#card-suggestions', update_on_scroll: 'true' } }
          = render partial: 'structures/registration'

      -# = react_component('Favorite', { logged_in: current_user.present?, type: 'indexable_card', favorited: @favorited })

      - if (@course.teaches_at_home? and home_place) or @place.present?
        .bg-white.push--bottom
          .bg-yellow.soft--sides.soft-half--ends.bordered--top.bordered--sides.white
            %h2.flush
              %i.fa.fa-map-marker.v-middle
              %span.v-middle Lieu
          - home_place_map_attributes = {}
          - if @course.teaches_at_home? and home_place
            - home_place_map_attributes = { home: { latitude: home_place.latitude, longitude: home_place.longitude, radius: home_place.radius } }
          - if @place.present?
            = react_component('CardPageMap', { latitude: @place.latitude, longitude: @place.longitude,
                                              root_subject: dominant_root_subject_slug,
                                              metro_stops: ActiveModel::ArraySerializer.new(@place.nearby_metro_stops, each_serializer: MetroStopSerializer) }.merge(home_place_map_attributes),
                                             { prerender: false })

            .soft--ends.bordered--sides.bordered--bottom
              %div.soft--sides.push-half--bottom{ style: "min-width: 80px;", itemprop: "location", itemscope: true, itemtype: "http://data-vocabulary.org/Organization" }
                %div{ itemprop: 'name', data: { toggle: "popover", html: "true", trigger: "hover", content: @place.popover_place_infos, placement: 'left' } }
                  %h4.flush= @place.name.slice(0,1).capitalize + @place.name.slice(1..-1)
                  %span.f-weight-500= @place.address
                - if @course.teaches_at_home? and home_place
                  %h4.flush--bottom.push--top
                    Se déplace à domicile
                  %span.f-weight-500 À #{home_place.city.name} dans un rayon de #{home_place.radius}km

                %span{ itemprop: 'address', itemscope: true, itemtype: 'http://data-vocabulary.org/Address'}
                  %meta{ itemprop: 'street-address', content: @place.address }
                  %span{ itemprop: 'geo', itemscope: true, itemtype: 'http://data-vocabulary.org/Geo' }
                    %meta{ itemprop: 'latitude', content: @place.latitude }
                    %meta{ itemprop: 'longitude', content: @place.longitude }

              - if @place.nearby_metro_stops.any?
                %hr.push--ends
                .soft--sides
                  %h4.push-half--bottom Transports
                  - @place.nearby_metro_stops.includes(:lines).each do |stop|
                    %div.push-half--bottom
                      - stop.lines.each do |line|
                        = MetroLineDecorator.new(line).chip
                      %strong= link_to stop.name, root_search_page_path(dominant_root_subject_slug, (@city || 'paris'), metro_stop: stop.slug), class: 'v-middle semi-muted-link'
              - cache [@indexable_card, 'structures/indexable_cards/show/vertical_pages'] do
                .soft--sides.visuallyhidden
                  %h4.push-half--bottom Quartiers
                  - if @place.neighboroods.any?
                    - @course.subjects.each do |subject|
                      - vertical_page = subject.vertical_pages.first
                      - next if vertical_page.nil?
                      - @place.neighboroods.each do |neighborood|
                        %div= link_to "Cours de #{vertical_page.subject_name.downcase} à #{neighborood.name} (#{@city.name} - #{@city.zip_code})", vertical_page_with_neighborhood_path(subject.root, vertical_page, (@city || 'paris'), neighborood)
                  - elsif @city
                    - @course.subjects.each do |subject|
                      - vertical_page = subject.vertical_pages.first
                      - next if vertical_page.nil?
                      %div= link_to "Cours de #{vertical_page.subject_name.downcase} à #{@city.name} - #{@city.zip_code}", vertical_page_with_city_path(subject.root, vertical_page, @city)

        - unless @structure.is_sleeping?
          .bg-white.bordered.push--bottom.soft= render 'structures/response_stats'

.soft-double.soft--bottom.palm-hard#card-suggestions
  .grid--full.push--bottom
    %h2.text--center D'autres cours qui peuvent vous plaire
    = react_component('SimilarCardList', { card:  @card_redux })

= content_for :scripts do
  -# This is used when a user make a reservation.
  -# The confirmation popup will ask to update logo if the user does not have one already.
  = filepicker_js_include_tag

- @prerender_not_ready = false

- if current_pro_admin and current_pro_admin.super_admin?
  .fixed.west.south.push
    = link_to toggle_pure_player_structure_path(@structure), class: 'btn btn--green' do
      - if @structure.pure_player?
        Remove me from pure players
      - else
        Make me a pure player

= content_for :head do
  %link{ rel: 'canonical', href: structure_url(@structure) }

= render 'meta_information'

- if !current_user and params[:waiting_for_activation]
  .blue-box.islet.text--center.push--ends
    = render 'users/waiting_for_activation_text'

.soft--sides.soft-half--top.soft--bottom.palm-hard
  = render partial: 'structures/structure_header', locals: { structure: @structure }
  = render partial: 'structures/breadcrumbs', locals: { structure: @structure }
  .grid--full#presentation
    .grid__item.eight-twelfths.palm-one-whole.soft-half--right.palm-hard>
      .push--bottom.bg-white.bordered.soft--ends
        .soft--sides
          .grid.push--bottom
            .grid__item.v-top.one-fifth.text--center.palm-one-whole>
              - if @structure.logo.present?
                = image_tag @structure.logo.url(:small_thumb_100), height: 100, width: 100, data: { src2x: @structure.logo.url(:thumb) }, class: 'rounded--circle'
              - else
                .inline-block.rounded--circle-100.white.text--center{ class: "bg-#{@structure.dominant_root_subject.slug}" }
                  %i.fa.fa-user-big.alpha
            .grid__item.v-top.four-fifths.palm-one-whole>
              %h1.flush= @structure.name
              .delta.f-weight-500.push-half--bottom.gray= @structure_decorator.structure_type

              = react_component('SubjectList', { follow_links: true, colored: true, subject_list: ActiveModel::ArraySerializer.new(@structure.subjects.at_depth(2), each_serializer: SubjectListSerializer) })

          - if @structure.description.present?
            .push--bottom
              .read-more{ data: { behavior: 'read-more' } }
                = simple_format @structure.description

        - if @structure.medias.any?
          .push--bottom
            %h2.soft--sides Photos & Vidéos
            = render partial: 'structures/indexable_cards/gallery', locals: { medias: @structure.medias.cover_first.videos_first, structure: @structure }

        - if @structure.courses.trainings.any?
          %h2.soft--sides#stages-ateliers Stages
        - @structure.courses.trainings.includes(:prices, :price_group).each do |training|
          - next if training.plannings.future.count == 0

          .soft--sides
            = render partial: 'structures/courses/header', locals: { course: training }

          = react_component('Course', { show_location: true, course: CourseSerializer.new(training), plannings: ActiveModel::ArraySerializer.new(training.plannings.ordered_by_day.future, each_serializer: PlanningSerializer) }, { prerender: false })
          .push--bottom.bordered--bottom.soft--bottom
            = render partial: 'structures/courses/footer', locals: { course: training }
        - if @structure.courses.lessons.any?
          %h2.soft--sides#cours-collectifs Cours collectifs
        - @structure.courses.lessons.includes(:prices, :price_group).each do |lesson|
          - next if lesson.plannings.future.count == 0

          .soft--sides
            = render partial: 'structures/courses/header', locals: { course: lesson }
          = react_component('Course', { show_location: true, course: CourseSerializer.new(lesson), plannings: ActiveModel::ArraySerializer.new(lesson.plannings.ordered_by_day.future, each_serializer: PlanningSerializer) }, { prerender: false })

          .push--bottom.bordered--bottom.soft--bottom
            = render partial: 'structures/courses/footer', locals: { course: lesson }
        - if @structure.courses.privates.any?
          %h2.soft--sides#cours-particuliers Cours particuliers
        - @structure.courses.privates.includes(:prices, :price_group).each do |private|
          - next if private.plannings.future.count == 0

          .soft--sides
            = render partial: 'structures/courses/header', locals: { course: private }

          = react_component('Course', { show_location: true, course: CourseSerializer.new(private), plannings: ActiveModel::ArraySerializer.new(private.plannings.ordered_by_day.future, each_serializer: PlanningSerializer) }, { prerender: false })
          .push--bottom.bordered--bottom.soft--bottom
            = render partial: 'structures/courses/footer', locals: { course: private }

        .soft--bottom
          = react_component('MessageThreadList', { structure: StructureSerializer.new(@structure) })
        .soft--sides.soft--bottom#avis
          = react_component('CommentList', { structure: StructureSerializer.new(@structure) })
        - if @is_sleeping
          = render partial: 'structures/sleeping_content', locals: { medias: @medias }
      .beta.text--center.tk-lexia.bordered--bottom.soft--bottom.f-weight-400.push--bottom Articles de blog associés
      .grid
        - @structure.associate_blog_articles.each do |article|
          .grid__item.one-third.palm-one-whole.push--bottom>
            = link_to blog_article_path(article), class: 'block link-colored-on-hover', title: article.title do
              = image_tag article.image.url(:similar_article), class: 'block one-whole hoverable-media'
              %h4.text--center.tk-lexia.f-style-itali--fullc.f-weight-normal.flush.delta.soft-half--top.line-height-1-3= article.title
    .grid__item.four-twelfths.palm-one-whole.visuallyhidden--palm>
      .bg-white
        .on-top-of-the-world{ data: { behavior: 'sticky', old_width: 'true' } }
          = render 'registration'
          = react_component('Map', { markers: @structure.places.map(&:to_react_json), hide_numbers: true } )
        - unless @is_sleeping
          .soft.bordered--sides= render 'structures/response_stats'

        .soft.bordered
          %h4 Profils similaires
          - @similar_profiles.each_with_index do |structure, index|
            %div{ style: 'height: 70px;' }
              .soft-half--sides
                .grid--full{ data: { similar_profile: true, structure_id: structure.id } }
                  .grid__item.v-middle.one-fifth>
                    %div{ itemprop: 'image', content: structure.logo.url }
                      = image_tag structure.logo.url(:thumb), class: 'rounded--circle'
                  .grid__item.v-middle.four-fifths.soft-half--left.opacity-hidden-on-hover__wrapper>
                    %h6.flush.line-height-1-5.text-ellipsis
                      = link_to structure.name, structure_path(structure), class: 'muted-link'
                    .line-height-1-5
                      %i= truncate(structure.cities_text, length: 40)


= content_for :scripts do
  -# This is used when a user make a reservation.
  -# The confirmation popup will ask to update logo if the user does not have one already.
  = filepicker_js_include_tag

- if Rails.env.production?
  = content_for :scripts do
    :javascript
      $(function() {
          mixpanel.track("Structures/show: landing", { "structure_slug": "#{@structure.slug}", "structure_name": "#{escape_javascript(@structure.name)}" });
          CoursAvenue.statistic.logStat(window.coursavenue.bootstrap.structure.id, 'view')
      });

- if Rails.env.production? and params[:utm_campaign] == 'take_control'
  = content_for :scripts do
    :javascript
      $(function() {
          mixpanel.track("Structures/show: landing_from_email", { "structure_slug": "#{@structure.slug}", "structure_name": "#{escape_javascript(@structure.name)}" });
      });

= content_for :scripts do
  :javascript
    $(function() {
        $(document.body).on('coursavenue:started', function() {
            CoursAvenue.statistic.logView(#{@structure.id});
        });
    });

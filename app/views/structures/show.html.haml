- if @structure.logo.present?
  = content_for :meta_image do
    = @structure.logo.url(:thumb)

= content_for :title do
  = "#{@structure.name} à #{@city.name}"

= content_for :meta_description do
  - if @structure.description.present?
    = "#{@structure.description_for_meta} à #{@city.name}"
  - else
    - if @structure.parent_subjects_string.present?
      = "Retrouvez tous les cours de #{@structure.name} à #{@city.name}. #{subjects_name_from_string(@structure.parent_subjects_string)} et bien plus ! à #{@city.name}"
    - else
      = "Retrouvez tous les cours de #{@structure.name} à #{@city.name}"

.inline-block
  - if cookies[:structure_search_path]
    = link_to cookies[:structure_search_path] do
      %i.orange ←
      = t('.back_to_results')
  - else
    = link_to structures_path do
      %i.orange ←
      = t('.see_arrounding_structures')
.inline-block.push-half--sides
  |
.inline-block
  %ol.nav.breadcrumb.flush{itemprop: 'breadcrumb'}
    %li
      = link_to "Tous les établissement", structures_path
    %li= @structure.name

- if !current_user and params[:waiting_for_activation]
  .blue-box.islet.text--center.push--ends
    = render 'users/waiting_for_activation_text'

.grid.push--top
  .grid__item.eight-twelfths>
    = render partial: 'structures/structure_header', locals: {structure: @structure}

    = render partial: 'structures/map_and_gallery', locals: {structure: @structure, places: @structure.places, medias: @medias}

    = render partial: 'structures/comments_headband', locals: {structure: @structure}

    #structure-profile{data: { type: 'structure-profile-root'}}

    -# creates tabs as HTML, that translate clicks to tab:clicked events
    .tabs__bar
      %ul.tabs
        - @tabs.each_with_index do |tab, index|
          %li{ class: "#{index === 0 ? "active" : "" }", data: { behaviors: ["activateOn#{tab[:name]}TabClicked", "deactivateSiblings"] }}
            %a{ href: "#tab-#{tab[:slug]}", data: { relation: tab["slug"], behaviors: ["emit#{tab[:name]}TabClickedOnClick"] } }
              - unless tab[:icon].blank?
                %i{ class: "fa fa-#{ tab[:icon] }" }
              = tab[:name]

    .tabs--container
      %article.tab-pane.active{ data: { view: 'Collection', of: 'Courses',  bootstrap: @model.courses.to_json,  component: 'TabContents', for: 'courses' }}
        .white-box.islet{ data: { 'sample-tag' => true }}
          - @model.courses.each_with_index do |course, index|
            - # this is a behavior trying to listen to an app event
            %div{ data: { behaviors: ["LoggerForCourseHovered"] }}
              - course = JSON.parse(CourseSerializer.new(course).to_json) # get the json ready for bootstrap
              - course["is_first"] = index == 0
              = render template: '../assets/javascripts/backbone/structure_profile/views/courses/templates/course', locals: course

      %article.tab-pane{ data: { view: 'Collection', of: "Teachers", bootstrap: @model.teachers.to_json, component: 'TabContents', for: 'teachers'}}
        - @model.teachers.each do |teacher|
          .white-box.islet{ data: { 'sample-tag' => true }}
            - teacher = JSON.parse(teacher.to_json)
            = render template: '../assets/javascripts/backbone/structure_profile/views/teachers/templates/teacher', locals: teacher

      %article.tab-pane{ data: { view: 'Collection', of: "Comments", bootstrap: @model.comments.to_json, component: 'TabContents', for: 'comments'}}
        -# this will be used as the tagName and className of the CollectionView and ItemView
        %ul.comment-list{ data: { 'sample-tag' => true }}
          %li.comment-list__el.hard--left.soft-half.white-box{ data: { "sample-item" => true }}

#course_info.hidden= render 'structures/courses/info_popup'

= content_for :scripts do
  :javascript
    $(function() {
        if (window.location.hash.indexOf('recommandation-') != -1) {
            $('[href=#tab-comments]').click();
            $.scrollTo($(window.location.hash), {duration: 500});
        }
        if (window.location.hash.length > 0) {
            $('[href=' + window.location.hash + ']').click();
        }
    });

  :javascript
    var places = #{ActiveModel::ArraySerializer.new(@structure.places, each_serializer: BigPlaceSerializer).to_json};
    window.coursavenue = window.coursavenue || {};
    window.coursavenue.bootstrap = {
      model: #{ @model.to_json },
      places: places,
    };

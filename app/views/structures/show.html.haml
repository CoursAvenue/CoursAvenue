- if @structure.logo.present?
  = content_for :meta_image do
    = @structure.logo.url(:thumb)

= content_for :title do
  = "#{@structure.name} à #{@city.name}"

= content_for :meta_description do
  - if @structure.description.present?
    = "#{@structure.description_for_meta} à #{@city.name}"
  - else
    - if @structure.parent_subjects_string.present?
      = "Retrouvez tous les cours de #{@structure.name} à #{@city.name}. #{subjects_name_from_string(@structure.parent_subjects_string)} et bien plus ! à #{@city.name}"
    - else
      = "Retrouvez tous les cours de #{@structure.name} à #{@city.name}"

.inline-block
  - if cookies[:structure_search_path]
    = link_to cookies[:structure_search_path] do
      %i.orange ←
      = t('.back_to_results')
  - else
    = link_to structures_path do
      %i.orange ←
      = t('.see_arrounding_structures')
.inline-block.push-half--sides
  |
.inline-block
  %ol.nav.breadcrumb.flush{itemprop: 'breadcrumb'}
    %li
      = link_to "Tous les établissement", structures_path
    %li= @structure.name

- if !current_user and params[:waiting_for_activation]
  .blue-box.islet.text--center.push--ends
    = render 'users/waiting_for_activation_text'

.grid.push--top
  .grid__item.eight-twelfths>
    - if @structure.courses.open_courses.any?
      = render 'has_open_courses_header'
    = render partial: 'structures/structure_header', locals: {structure: @structure}

    = render partial: 'structures/map_and_gallery', locals: {structure: @structure, places: @structure.places, medias: @medias}

    = render partial: 'structures/comments_headband', locals: {structure: @structure}

    .tabs__bar
      %ul.tabs
        %li.active
          %a{ href: "#tab-description", data: { toggle: "tab" } }
            Description
        %li
          %a{ href: "#tab-courses", data: { toggle: "tab" } }
            %i.fa.fa-calendar
            Cours
        %li
          %a{ href: "#tab-comments", data: { toggle: "tab" } }
            %i.fa.fa-comments
            Avis
        %li
          %a{ href: "#tab-calendar", data: { toggle: "tab" } }
            %i.fa.fa-user
            Professeurs

    #structure-profile{ data: { type: 'structure-profile-root' } }
      .tabs--container#structure-tabs
        %article#tab-description.tab-pane.active
          .white-box.islet
            %table.one-half.float--right.table--data.table--striped.bordered
              %tbody
                - if @structure.structure_type.present?
                  %tr
                    %td
                      %strong Type de structure
                    %td= t(@structure.structure_type)
                %tr
                  %td
                    %strong Cours proposés
                  %td= @structure_decorator.given_course_types
                - if @structure.funding_types.any?
                  %tr
                    %td
                      %strong Financements acceptés
                    %td= @structure_decorator.given_funding_type
            %div= simple_format @structure.description

        %article#tab-courses.tab-pane
          .bg-blue.one-whole.push-half--top.very-soft.white.soft--sides
          .white-box.islet
            - @model.courses.each_with_index do |course, index|
              %div.two-thirds>
                - course = JSON.parse(course.to_json) # get the json ready for bootstrap
                - course["is_first"] = index == 0
                - unless @planning_groups[course["id"]].nil?
                - plannings = ActiveModel::ArraySerializer.new(@planning_groups[course["id"]],   each_serializer: PlanningSerializer)
                  = render template: '../assets/javascripts/backbone/structure_profile/templates/structure/courses/course_view', locals: course
                  %div
                    %table.table--striped{ data: { tagName: true }}
                      %thead
                        %th Jour
                        %th Horaire
                        %th Niveau
                        %th Audience
                      %tbody{ data: { itemviewContainer: true }}
                        - plannings.serializable_array.each do |planning|
                          %tr{ data: { itemviewTagName: true }}
                            = render template: '../assets/javascripts/backbone/structure_profile/templates/structure/courses/plannings/planning_view', locals: planning

        %article#tab-teachers.tab-pane
          - @teachers.each do |teacher|
            - teacher = JSON.parse(teacher.to_json)
            .white-box.islet{ data: { 'tagName' => true }}
              = render template: '../assets/javascripts/backbone/structure_profile/templates/structure/teachers/teacher_view', locals: teacher, formats: :jst

        %article#tab-comments.tab-pane
          -# this will be used as the tagName and className of the CollectionView and ItemView
          %ul.comment-list{ data: { 'tagName' => true }}
            %li.comment-list__el.hard--left.soft-half.white-box{ data: { "itemviewTagName" => true }}

  .grid__item.four-twelfths>
    - if @structure.main_contact
      = render partial: 'structures/contact_form', locals: {structure: @structure}

    - if @structure.side_cover_image.present?
      .white-box.islet
        .text--center= image_tag @structure.side_cover_image.thumbnail_url, alt: "Cours de #{join_parent_subjects_text @structure} à #{@city.name}"


= content_for :scripts do
  :javascript
    $(function() {
        if (window.location.hash.indexOf('recommandation-') != -1) {
            $('[href=#tab-comments]').click();
            $.scrollTo($(window.location.hash), {duration: 500});
        }
        if (window.location.hash.length > 0) {
            $('[href=' + window.location.hash + ']').click();
        }
    });
    (function () {
      var places    = #{ActiveModel::ArraySerializer.new(@structure.places,   each_serializer: BigPlaceSerializer).to_json };
      var teachers  = #{ActiveModel::ArraySerializer.new(@structure.teachers, each_serializer: TeacherSerializer).to_json };
      var courses   = #{ActiveModel::ArraySerializer.new(@structure.courses,  each_serializer: CourseSerializer).to_json };

      window.coursavenue = window.coursavenue || {};
      window.coursavenue.bootstrap = {
        structure: #{ @model.to_json },
        courses: courses,
        teachers: teachers,
        comments: #{ @model.comments.to_json },
        places: places,
        center: #{ @center.to_json }
      };
    }());

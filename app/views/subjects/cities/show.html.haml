= content_for :title do
  = "Tous les cours de #{@subject.name.downcase} à #{@city.name}"

= content_for :above_container do
  .soft.large-container
    %h2.alpha.weight-normal.text--center= "Tous les cours de #{@subject.name.downcase} à #{@city.name}"
    .grid.push--bottom
      .grid__item.one-third>
        .white-box.soft.text--center
          .beta
            = @structures.map(&:comments).flatten.count
            recommandations
          %p.flush
            %a{href: '#recommandations', data: {behavior: 'scroller'}} Voir les témoignages

      .grid__item.one-third>
        .white-box.soft.text--center
          .beta
            = @medias.count
            photos & vidéos
          %p.flush
            %a{href: '#galerie-photos', target: '_blank', data: {behavior: 'scroller'}} Voir la galerie photos
      .grid__item.one-third>
        .white-box.soft.text--center
          .beta
            = @plannings.count
            séances
          %p.flush
            %a{href: '#cours', data: {behavior: 'scroller'}} Voir tous les cours

    :css
      .gmaps4rails_map {
        height: 60em;
      }

    .grid
      .grid__item.three-fifths>
        - if @structures.blank?
          = gmaps( {markers: {data: [{lat: @city.latitude, lng: @city.longitude}].to_json}, map_options: {maxZoom: 11, mapTypeControl: false}})
        - else
          = gmaps( {markers: {data: @json_structure_addresses}, map_options: {mapTypeControl: false}})
      .grid__item.two-fifths>
        - number_of_structure_rendered = 0
        - @structures.each do |structure|
          - break if number_of_structure_rendered == 6
          - comment = structure.comments.where{(title != nil) & (title != '')}.first
          - if comment
            - number_of_structure_rendered += 1
            = render partial: 'structures/structure_with_comment', locals: {structure: structure, comment: comment}
        = link_to 'Voir les autres profils', subject_structures_path(@subject, address_name: @city.name, latitude: @city.latitude, longitude: @city.longitude), class: 'btn btn--full btn--large', target: '_blank'

  .home-screen-promotion-wrapper
    .main-container.text--center
      .alpha.push--ends Rejoignez gratuitement la communauté CoursAvenue
      = link_to "Créer mon profil gratuit", inscription_pro_structures_url(subdomain: 'pro'), class: 'btn btn--green btn--large', target: '_blank'

  #recommandations
    .alpha.text--center.soft--ends Les élèves recommandent leurs cours
    %ul.no-bullet-list.js-masonry{'data-masonry-options' => '{ "itemSelector": ".comment_masonry__item" }'}
      - @structures.select{|s| s.comments_count > 0}.sample(25).each do |structure|
        .one-third.very-soft.comment_masonry__item>
          = render partial: 'comments/comment', locals: {comment: structure.comments.last, with_link: true}

  #galerie-photos.soft--bottom.home-screen-promotion-wrapper.push--top
    .soft--ends.text--center
      .alpha La galerie photos
      %p.flush= link_to 'Accéder à la galerie vidéos', videos_subject_city_medias_path(@subject, @city)
    .media-gallery
      - @medias.select{|media| media.format == 'image'}.sample(25).each do |media|
        .one-quarter.media__item.very-soft{style: 'max-width: 450px'}>
          %a.break-all.flush--bottom.white-box.islet{href: media.url, title: media.caption}
            = media.url_html
            %p.flush--bottom.text--right
              = media.mediable.name
    .text--center.push--top
      = link_to 'Accéder à la galerie vidéos', videos_subject_city_medias_path(@subject, @city), class: 'btn btn--large btn--blue'

  .soft--bottom#cours.main-container
    %h2.weight-normal.alpha.flush.text--center.soft--ends Tous les cours de #{@subject.name.downcase} à #{@city.name}
    %table.table--striped.table--data.white-box#dataTable
      %thead
        %tr
          %th Nom du cours
          %th Donné par
          %th Niveau
          %th.text--center.nowrap Nbre de séances
          %th.text--right.nowrap à partir de
      %tbody
        - @courses.each do |course|
          %tr
            %td= link_to course.name, structure_course_path(course.structure, course)
            %td= link_to course.structure.name, structure_path(course.structure)
            %td
              = join_levels(course.plannings.collect(&:levels).flatten.uniq.sort_by(&:order))
            %td.text--center= course.plannings.count
            %td.text--right
              - if course.best_price
                = "#{readable_amount course.best_price.amount}€".html_safe
              - else
                \-

= content_for :scripts do
  :javascript
    $(function() {
        // Using one load prevents from not triggering the event if the image is in cache
        $('.media-gallery img, .media-gallery iframe').one('load', function() {
            $('.media-gallery').masonry({ itemSelector: '.media__item' });
        }).each(function() { if(this.complete) $(this).load(); });;
        $('.media-gallery .media__item a').fancybox({ helpers : { media : {} } });
        $('[data-behavior=scroller]').click(function(){
            var href = $(this).attr('href');
            $.scrollTo(href, {duration: 600, easing: 'easeInOutCubic'});
            setTimeout(function(){
                window.location.hash = href;
            }, 600)
            return false;
        })
        // Handle gmaps clicks
        var structure_path = "#{structure_path('__ID__')}";
        Gmaps.map.callback = function() {
            for (var i = 0; i <  this.markers.length; ++i) {
                google.maps.event.addListener(Gmaps.map.markers[i].serviceObject, 'click', function() {
                    window.open(structure_path.replace('__ID__', this.structure_slug));
                }.bind(Gmaps.map.markers[i]));
            }
        };
        $('[data-type=structure-element]').hover(function(event) {
            var location_ids = $(this).data('location-ids').toString().split(' ');
            $.each(Gmaps.map.markers, function(index, marker){
                if (location_ids.indexOf(marker.id.toString()) !== -1) {
                    var service_object = marker.serviceObject;
                    service_object.setContent($(service_object.getContent()).addClass('active')[0].outerHTML);
                }
            });
        }, function() {
            var location_ids = $(this).data('location-ids').toString().split(' ');
            $.each(Gmaps.map.markers, function(index, marker){
                if (location_ids.indexOf(marker.id.toString()) !== -1) {
                    var service_object = marker.serviceObject;
                    service_object.setContent($(service_object.getContent()).removeClass('active')[0].outerHTML);
                }
            });
        });
    });

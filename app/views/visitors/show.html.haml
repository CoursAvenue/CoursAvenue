%script{ src: "http://d3js.org/d3.v3.min.js" }

%p fingerprint: #{ @visitor.fingerprint } 
%p collisions:  #{ @visitor.comment_collision? } 

.chart-container.push--right
  %svg.chart

%h3 Comments
%ul.comment-list
  - @comments.each do |comment|
    .grid.one-whole.flex-stretch
      .grid__item.one-half>
        = render partial: 'comments/comment', locals: { comment: comment.to_c }
      .grid__item.one-half.faux-column.push--left.soft--right.relative>
        .delta.blue #{ comment.commentable.name }
        %hr.push-half--bottom
        .push--right
          %i.fa.fa-envelope-o
          #{ comment.email }
        .push--right
          %i.fa.fa-home
          #{ comment.ip_address.nil? ? "0.0.0.0" : comment.ip_address }
        .push--right
          %i.fa.fa-calendar
          #{ comment.created_at }
        .btn.absolute.south-east.push{ class: "#{ comment.submitted? ? "btn--green" : "btn--orange" }"}
          #{ comment.submitted? ? "Submitted" : "Abandoned" }

:javascript
  var width = document.getElementsByClassName("chart-container").item(0).offsetWidth,
      height = 500;

  var data = #{ @visitor.address_data };

  var y = d3.scale.linear()
    .range([height, 0])
    .domain([0, d3.max(data, function(d) { return d[1]; })]);

  var chart = d3.select(".chart")
    .attr("width", width)
    .attr("height", height);

  var barWidth = width / data.length;

  var bar = chart.selectAll("g")
    .data(data)
    .enter().append("g")
      .attr("transform", function(d, i) { return "translate(" + i * barWidth + ",0)"; });

  bar.append("rect")
    .attr("y", function(d) { return y(d[1]); })
      .attr("height", function(d) { return height - y(d[1]); })
      .attr("width", barWidth - 1);

  bar.append("text")
    .attr("x", barWidth / 2)
      .attr("y", function(d) { return y(d[1]) + 3; })
      .attr("dy", ".75em")
        .text(function(d) { return d[0]; });



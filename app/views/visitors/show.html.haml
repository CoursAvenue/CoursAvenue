%script{ src: "http://d3js.org/d3.v3.min.js" }

.white-box.islet.push--right
  = render partial: "visitor_summary", locals: { visitor: @visitor }

.chart-container.push--right
  %svg.chart

%h3 Comments
%ul.comment-list
  - @comments.each do |comment|
    .grid.one-whole.flex-stretch
      .grid__item.one-half>
        = render partial: 'comments/comment', locals: { comment: comment.to_c }
      .grid__item.one-half.faux-column.push--left.soft--right.relative>
        .delta.blue #{ comment.commentable.name }
        %hr.push-half--bottom
        .push--right
          %i.fa.fa-envelope-o
          #{ comment.email }
        .push--right
          %i.fa.fa-home
          #{ comment.ip_address.nil? ? "0.0.0.0" : comment.ip_address }
        .push--right
          %i.fa.fa-calendar
          #{ comment.created_at }
        .btn.absolute.south-east.push{ class: "#{ comment.submitted? ? "btn--green" : "btn--orange" }"}
          #{ comment.submitted? ? "Submitted" : "Abandoned" }

:javascript
  var width  = document.getElementsByClassName("chart-container").item(0).offsetWidth,
      height = 250,
      radius = 100,
      color  = d3.scale.category20c(),
      data = #{ @visitor.address_data };

  
  var vis = d3.select(".chart")
    .append("svg:g") //make a group to hold our pie chart
    .attr("transform", "translate(" + radius + "," + radius + ")") //move the center of the pie chart from 0, 0 to radius, radius

  var arc = d3.svg.arc() //this will create <path> elements for us using arc data
    .outerRadius(radius);

  var pie = d3.layout.pie() //this will create arc data for us given a list of values
    .value(function(d) { return parseInt(d[1], 10); }); //we must tell it out to access the value of each element in our data array

  var arcs = vis.selectAll("g.slice") //this selects all <g> elements with class slice (there aren't any yet)
    .data(pie(data)) //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
    .enter() //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
    .append("svg:g") //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
    .attr("class", "slice"); //allow us to style things in the slices (like text)

  arcs.append("svg:path")
    .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
    .attr("d", arc); //this creates the actual SVG path using the associated data (pie) with the arc drawing function

  arcs.append("svg:text") //add a label to each slice
    .attr("transform", function(d, i) { //set the label's origin to the center of the arc
      //we have to make sure to set these before calling arc.centroid
      var offsetY = -i * (15 + 5) + radius - 9;
      var offsetX = radius + 20 + 15 + 5;
      return "translate(" + offsetX + ", " + offsetY + ")"; //this gives us a pair of coordinates like [50, 50]
    })
    .attr("fill", "black")
    .attr("text-anchor", "start") //center the text on it's origin
    .text(function(d, i) { return d.data[0]; });

  vis.selectAll("rect")
    .data(pie(data))
    .enter()
      .append("svg:rect")
      .attr("fill", function (d, i) { return color(i); } )
      .attr("x", radius + 20)
      .attr("y", function (d, i) {
        var offsetY = i * (15 + 5);
        return offsetY;
      })
      .attr("width", 15)
      .attr("height", 15);

[1mdiff --git a/app/assets/javascripts/backbone/user_management/views/user_profiles_collection/user_profile/editable_tag_bar/editable_tag_bar_view.js b/app/assets/javascripts/backbone/user_management/views/user_profiles_collection/user_profile/editable_tag_bar/editable_tag_bar_view.js[m
[1mindex 40d7528..6e89932 100644[m
[1m--- a/app/assets/javascripts/backbone/user_management/views/user_profiles_collection/user_profile/editable_tag_bar/editable_tag_bar_view.js[m
[1m+++ b/app/assets/javascripts/backbone/user_management/views/user_profiles_collection/user_profile/editable_tag_bar/editable_tag_bar_view.js[m
[36m@@ -6,6 +6,7 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
     var ESC       = 27;[m
     var SPACE     = 32;[m
     var BACKSPACE = 8;[m
[32m+[m[32m    var COMMA     = 188;[m
 [m
     /* TODO when I backspace, it should "untag" the taggie, turning it back into a text */[m
     /* TODO I need to define clearly what parts of the template will be added/removed over time[m
[36m@@ -25,10 +26,11 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
             this.attribute = options.attribute;[m
 [m
             /* build a recyclable taggy */[m
[31m-            var taggy = $("<span>").addClass('taggy--tag');[m
[32m+[m[32m            var taggy = $("<span>")[m
[32m+[m[32m                .addClass('taggy--tag');[m
             var saltier = $("<span>")[m
                 .addClass('taggy--tag__saltier')[m
[31m-                .data('behavior', "destroy");[m
[32m+[m[32m                .attr('data-behavior', "destroy");[m
 [m
             taggy.append(saltier);[m
             this.$taggy_template = taggy;[m
[36m@@ -40,11 +42,17 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
             'click'                         : 'announceClick',[m
             'click [data-behavior=destroy]' : 'destroyTaggy',[m
             'keydown'                       : 'handleKeyDown',[m
[31m-            'change'                        : 'announceEdits'[m
[32m+[m[32m            'change'                        : 'announceEdits',[m
[32m+[m[32m            'typeahead:selected [type=text]': 'wat'[m
[32m+[m[32m        },[m
[32m+[m
[32m+[m[32m        wat: function (e) {[m
[32m+[m[32m            debugger[m
[32m+[m
         },[m
 [m
         ui: {[m
[31m-            '$input': 'input',[m
[32m+[m[32m            '$input'    : '.taggy--input',[m
             '$container': '[data-type=taggies-container]'[m
         },[m
 [m
[36m@@ -64,6 +72,13 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
 [m
         onRender: function () {[m
             this.$rollback = this.ui.$container.children().clone();[m
[32m+[m[32m            this.ui.$input.typeahead([{[m
[32m+[m[32m                name: "bob",[m
[32m+[m[32m                local: ["bob", "jill", "hilarious"][m
[32m+[m[32m            }]);[m
[32m+[m
[32m+[m[32m            /* rebind the ui */[m
[32m+[m[32m            this.bindUIElements();[m
         },[m
 [m
         /* SPACE: turn the text into a taggy */[m
[36m@@ -71,7 +86,8 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
         handleKeyDown: function (e) {[m
             var key = e.which;[m
 [m
[31m-            if (key === SPACE) {[m
[32m+[m[32m            if (key === COMMA) {[m
[32m+[m[32m                e.preventDefault();[m
                 this.createTaggy();[m
             }[m
 [m
[36m@@ -105,18 +121,18 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
 [m
         /* when the user clicks 'x' */[m
         destroyTaggy: function (e) {[m
[31m-            console.log("destroy");[m
             $(e.currentTarget).parent().remove();[m
 [m
             this.updateInputWidth();[m
             this.announceEdits();[m
[32m+[m[32m            this.ui.$input.val("");[m
         },[m
 [m
         /* returns the jQuery object representation of a taggy, for a given text */[m
         buildTaggy: function (text) {[m
             var taggy = this.$taggy_template.clone();[m
 [m
[31m-            taggy.data("value", text);[m
[32m+[m[32m            taggy.attr("data-value", text);[m
             taggy.prepend(text);[m
 [m
             return taggy;[m
[36m@@ -133,10 +149,6 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
                 return memo;[m
             }, this), 0);[m
 [m
[31m-            console.log("tags:  %o", tags_width);[m
[31m-            console.log("field: %o", field_width);[m
[31m-            console.log("calc:  %o", tags_width % field_width);[m
[31m-            console.log("calc:  %o", tags_width % (field_width - 70));[m
             this.ui.$input.css({ width: (field_width - (tags_width % (field_width - 70))) + 'px', display: "" });[m
         },[m
 [m
[36m@@ -148,6 +160,12 @@[m [mUserManagement.module('Views.UserProfilesCollection.UserProfile.EditableTagBar',[m
             /* append said taggy */[m
             this.ui.$container.append(taggy);[m
 [m
[32m+[m[32m            // bind the new tag to ui.$taggies[m
[32m+[m[32m            // TODO this is probably a little wasteful,[m
[32m+[m[32m            // but at the same time we don't expect the[m
[32m+[m[32m            // user to need to create a million tags/second[m
[32m+[m[32m            this.bindUIElements();[m
[32m+[m
             this.updateInputWidth();[m
             this.ui.$input.val("");[m
         },[m
[1mdiff --git a/app/assets/stylesheets/partials/objects/_tags.scss b/app/assets/stylesheets/partials/objects/_tags.scss[m
[1mindex fe0ffe1..7cd552a 100644[m
[1m--- a/app/assets/stylesheets/partials/objects/_tags.scss[m
[1m+++ b/app/assets/stylesheets/partials/objects/_tags.scss[m
[36m@@ -1,3 +1,8 @@[m
[32m+[m[32m.tt-hint {[m
[32m+[m[32m    display: none;[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
 .taggy--tag {[m
     display         : inline-block;[m
     border          : 1px solid #CCC;[m
[36m@@ -58,7 +63,7 @@[m
 }[m
 [m
 .taggy--input:focus {[m
[31m-    border: none;[m
[32m+[m[32m    border: 1px solid;[m
[32m+[m[32m    box-shadow: none;[m
     outline     : 0;[m
[31m-    @include box-shadow(0 0 0px opacify($blue-green, 0.0),0 0 0 #000);[m
 }[m
